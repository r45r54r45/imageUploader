{"version":3,"sources":["../index.js"],"names":["Storage","require","projectId","process","env","GCLOUD_PROJECT","keyFilename","join","__dirname","uploadToServer","path","imageList","itemUID","bucketName","bucket","console","log","upload","absolutePath","imageIdentifier","resolve","reject","file","createReadStream","pipe","createWriteStream","gzip","predefinedAcl","on","err","getSignedUrl","action","expires","then","fileNum","split","url","result","map","image","readdir","promisify","excludeDotStartingFile","list","filter","item","mapProductDirectoryToVendorItemCode","resultList","tempItemName","dir","vendorItemCode","substring","length","compact","findProductDirectories","rootRoute","findImages","route","indexOf","extend","getWorkNeededItems","ITEM_UID","VENDOR_NAME_CD","VENDOR_ITEM_CODE","color","UPPER_COLOR_CD","material","UPPER_MATERIAL_CD","code","getMatchingItemDir","productDirectories","workNeededItems","temp","index","findIndex","product","Object","assign","subDir","all","targetData"],"mappings":"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","file":"index.js","sourcesContent":["import fs from 'fs';\nimport Promise from 'bluebird';\nimport _ from 'underscore';\nimport {query, queryEnd} from './mysql';\nimport {GET_ALL_IMAGE_WITHOUT_IMAGE, UPDATE_MAIN_IMAGE_URL_ON_DB, UPDATE_DETAIL_IMAGE_URL_ON_DB} from './query';\nimport path from 'path';\nconst Storage = require('@google-cloud/storage')({\n    projectId: process.env.GCLOUD_PROJECT,\n    keyFilename: path.join(__dirname, '../shugazine-60df3b2c8622.json'),\n});\n\nfunction uploadToServer(path, imageList, itemUID) {\n    const bucketName = 'product-image-shugazine';\n    const bucket = Storage.bucket(bucketName);\n    console.log(path)\n    function upload(absolutePath, imageIdentifier, bucket) {\n        return new Promise((resolve, reject) => {\n            let file = bucket.file(`${itemUID + '_' + imageIdentifier}`);\n            fs.createReadStream(absolutePath)\n                .pipe(file.createWriteStream({\n                    gzip: true,\n                    predefinedAcl: 'publicRead'\n                }))\n                .on('error', function (err) {\n                    console.log(err);\n                })\n                .on('finish', function () {\n                    // The file upload is complete.\n                    file.getSignedUrl({\n                        action: 'read',\n                        expires: '03-17-2025',\n                    })\n                        .then(url => {\n                            const fileNum = imageIdentifier.split('.')[0];\n                            if (fileNum === '1') {\n                                return query(UPDATE_MAIN_IMAGE_URL_ON_DB, [url, itemUID])\n                            } else {\n                                return query(UPDATE_DETAIL_IMAGE_URL_ON_DB(fileNum - 1), [url, itemUID])\n                            }\n                        })\n                        .then(result => {\n                            resolve(result);\n                        })\n\n                });\n        });\n    }\n\n    return Promise.map(imageList, image => upload(path + '/' + image, image, bucket));\n}\n\n\nconst readdir = Promise.promisify(fs.readdir);\n\nfunction excludeDotStartingFile(list) {\n    return list.filter(item => {\n        return item[0] !== '.';\n    })\n}\n\nfunction mapProductDirectoryToVendorItemCode(list) {\n    const resultList = list.map(item => {\n        const tempItemName = item.split('(')[1];\n        if (!tempItemName) return null;\n        return {\n            dir: item,\n            vendorItemCode: tempItemName.substring(0, tempItemName.length - 1)\n        }\n    })\n    return _.compact(resultList);\n}\nfunction findProductDirectories(rootRoute) {\n    return new Promise((resolve, reject) => {\n        readdir(rootRoute)\n            .then(result => {\n                resolve(mapProductDirectoryToVendorItemCode(excludeDotStartingFile(result)));\n            })\n    });\n}\nfunction findImages(item, route) {\n    return new Promise((resolve, reject) => {\n        readdir(route)\n            .then(result => {\n                const imageList = excludeDotStartingFile(result);\n                if (imageList.length === 0) {\n                    resolve(null);\n                } else if (_.indexOf(imageList,'notFinished') !== -1) {\n                    resolve(null);\n                } else {\n                    resolve(_.extend(item, {\n                        path: route,\n                        imageList: imageList\n                    }));\n                }\n            })\n    });\n}\nfunction getWorkNeededItems() {\n    return new Promise((resolve, reject) => {\n        query(GET_ALL_IMAGE_WITHOUT_IMAGE)\n            .then(result => {\n                console.log(result)\n                resolve(result.map(item => {\n                    return {\n                        itemUID: item.ITEM_UID,\n                        vendorItemCode: item.VENDOR_NAME_CD + item.VENDOR_ITEM_CODE,\n                        color: item.UPPER_COLOR_CD,\n                        material: item.UPPER_MATERIAL_CD,\n                        code: item.VENDOR_ITEM_CODE,\n                    }\n                }));\n            })\n    })\n}\n\nfunction getMatchingItemDir(productDirectories, workNeededItems) {\n    const temp = workNeededItems.map(item => {\n        console.log(productDirectories,item)\n        const index = _.findIndex(productDirectories, product => {\n            return product.vendorItemCode === item.vendorItemCode;\n        });\n        if (index !== -1) {\n            return {\n                dir: productDirectories[index].dir,\n                item: Object.assign(item, {subDir: item.code + '_' + item.color + '_' + item.material})\n            }\n        } else {\n            return false;\n        }\n    })\n    return _.compact(temp);\n}\n\n/*\n 조건\n\n product 와 item은 다르다\n product 안에 재질, 색이 다른 조합이 item 이다.\n */\n\nPromise.all([\n    findProductDirectories('/Volumes/pihome/Shugazine/상품이미지/상품이미지_17SS_최종'),\n    getWorkNeededItems()\n])\n    .then(result => {\n        const targetData = getMatchingItemDir(result[0], result[1]);\n        //각 폴더로 들어가서 파일이 있는지 확인\n        return Promise.map(targetData, item => findImages(item, '/Volumes/pihome/Shugazine/상품이미지/상품이미지_17SS_최종' + '/' + item.dir + \"/\" + item.item.subDir));\n    })\n    .then(temp => {\n        const result = _.compact(temp);\n        /*\n         { dir: '002.샤모니_에나멜미들힐로퍼(BL340)',\n         item:\n         { itemUID: '1000000016',\n         vendorItemCode: 'BL340',\n         color: 'WH0',\n         material: 'PUPT',\n         code: '340',\n         subDir: '340_WH0_PUPT' },\n         path: '/Volumes/pihome/Shugazine/상품이미지/상품이미지_17SS_최종/002.샤모니_에나멜미들힐로퍼(BL340)/340_WH0_PUPT',\n         imageList: [ '1.jpg', '2.jpg', '3.jpg', '4.jpg', '5.jpg', '6.jpg', '7.JPG' ] }\n         */\n        // 이 파일들을 서버로 보내기\n        return Promise.map(result, item => uploadToServer(item.path, item.imageList, item.item.itemUID));\n    })\n    .then(result => {\n        console.log(result);\n        queryEnd();\n    });"]}